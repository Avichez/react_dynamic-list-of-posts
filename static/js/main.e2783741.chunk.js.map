{"version":3,"sources":["utils/fetchClient.ts","components/Loader/Loader.tsx","components/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm.tsx","components/CommentsList/CommentsList.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","className","PostsList","selectedUser","selectedPost","onSelectPost","useState","userPosts","setUserPosts","isLoading","setIsLoading","hasError","setHasError","useEffect","getUserPosts","a","userId","id","allPosts","length","map","post","title","type","onClick","getCommentsByPostId","postId","addComment","comment","deleteComment","commentId","NewCommentForm","onAddComment","inputName","setInputName","inputEmail","setInputEmail","inputBody","setInputBody","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasCommentError","setHasCommentError","hasCommentLoading","setHasCommentLoading","resetFormError","handleAddComment","event","preventDefault","name","email","onSubmit","htmlFor","value","onChange","target","placeholder","cn","CommentsList","comments","setComments","isFormVisible","setIsFormVisible","getPostComments","allComments","useCallback","newComment","addedComment","currentComments","Error","handleDeleteComment","tempComments","prevComments","filter","href","PostDetails","UserSelector","users","onSelectUser","isListOpen","setIsListOpen","selectionRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","ref","prevState","role","user","handleChooseUser","App","setUsers","setSelectedUser","setSelectedPost","onLoadGetUsers","allUsers","handleSelectUser","handleSelectPost","classNames","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e2783741.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getPostsByUserId } from '../api/posts';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Loader } from './Loader';\n\ntype Props = {\n  selectedUser: User,\n  selectedPost: Post | null,\n  onSelectPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  selectedPost,\n  onSelectPost,\n}) => {\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    const getUserPosts = async () => {\n      setIsLoading(true);\n      onSelectPost(null);\n\n      try {\n        const allPosts = await getPostsByUserId(selectedUser.id);\n\n        setUserPosts(allPosts);\n      } catch (error) {\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserPosts();\n  }, [selectedUser]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (hasError) {\n    return (\n      <div\n        className=\"notification is-danger\"\n        data-cy=\"PostsLoadingError\"\n      >\n        Something went wrong!\n      </div>\n    );\n  }\n\n  if (!userPosts.length) {\n    return (\n      <div\n        className=\"notification is-warning\"\n        data-cy=\"NoPostsYet\"\n      >\n        No posts yet\n      </div>\n    );\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost === post\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => onSelectPost(null)}\n                    >\n                      Close\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => onSelectPost(post)}\n                    >\n                      Open\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getCommentsByPostId = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (comment: CommentData) => {\n  return client.post<Comment>('/comments', comment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import cn from 'classnames';\nimport React, { FormEvent, useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onAddComment: (comment: CommentData) => Promise<void>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onAddComment,\n}) => {\n  const [inputName, setInputName] = useState('');\n  const [inputEmail, setInputEmail] = useState('');\n  const [inputBody, setInputBody] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasCommentError, setHasCommentError] = useState(false);\n  const [hasCommentLoading, setHasCommentLoading] = useState(false);\n\n  const handleFormError = () => {\n    setHasNameError(!inputName);\n    setHasEmailError(!inputEmail);\n    setHasCommentError(!inputBody);\n  };\n\n  const resetFormError = () => {\n    setHasNameError(false);\n    setHasEmailError(false);\n    setHasCommentError(false);\n  };\n\n  const resetForm = () => {\n    resetFormError();\n    setInputName('');\n    setInputEmail('');\n    setInputBody('');\n  };\n\n  const resetOnSuccessSubmit = () => {\n    setInputBody('');\n    resetFormError();\n  };\n\n  const handleAddComment = async (event: FormEvent) => {\n    event.preventDefault();\n\n    handleFormError();\n\n    if (inputName && inputEmail && inputBody) {\n      try {\n        setHasCommentLoading(true);\n        await onAddComment({\n          name: inputName,\n          email: inputEmail,\n          body: inputBody,\n        });\n        resetOnSuccessSubmit();\n      } finally {\n        setHasCommentLoading(false);\n      }\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleAddComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={inputName}\n            onChange={event => {\n              setInputName(event.target.value);\n              setHasNameError(false);\n            }}\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': hasNameError,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {hasNameError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasNameError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={inputEmail}\n            onChange={event => {\n              setInputEmail(event.target.value);\n              setHasEmailError(false);\n            }}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': hasEmailError,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {hasEmailError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {hasEmailError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={inputBody}\n            onChange={event => {\n              setInputBody(event.target.value);\n              setHasCommentError(false);\n            }}\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': hasCommentError,\n            })}\n          />\n        </div>\n\n        {hasCommentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            // is-loading\n            className={cn('button is-link', {\n              'is-loading': hasCommentLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  addComment,\n  deleteComment,\n  getCommentsByPostId,\n} from '../../api/comments';\nimport { Comment, CommentData } from '../../types/Comment';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\n\ntype Props = {\n  postId: number,\n};\n\nexport const CommentsList: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [isFormVisible, setIsFormVisible] = useState(false);\n\n  const getPostComments = async () => {\n    try {\n      setIsLoading(true);\n      const allComments = await getCommentsByPostId(postId);\n\n      setComments(allComments);\n    } catch (error) {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getPostComments();\n\n    return () => {\n      setIsFormVisible(false);\n    };\n  }, [postId]);\n\n  const handleAddComment = useCallback(async (comment: CommentData) => {\n    const newComment = {\n      postId,\n      ...comment,\n    };\n\n    try {\n      const addedComment = await addComment(newComment);\n\n      setComments(currentComments => [...currentComments, addedComment]);\n    } catch (error) {\n      setHasError(true);\n      throw Error('Unable to add comment');\n    }\n  }, []);\n\n  const handleDeleteComment = async (commentId: number) => {\n    const tempComments = [...comments];\n\n    setComments(prevComments => prevComments\n      .filter(comment => comment.id !== commentId));\n\n    try {\n      await deleteComment(commentId);\n    } catch (error) {\n      setHasError(true);\n      setComments(tempComments);\n    }\n  };\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (hasError) {\n    return (\n      <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n        Something went wrong\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"block\">\n      {!comments.length\n        ? (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )\n        : (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n      {!isFormVisible\n        ? (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormVisible(true)}\n          >\n            Write a comment\n          </button>\n        )\n        : (\n          <NewCommentForm onAddComment={handleAddComment} />\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Post } from '../types/Post';\nimport { CommentsList } from './CommentsList';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const {\n    id,\n    title,\n    body,\n  } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <CommentsList postId={id} />\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  onSelectUser: (user: User | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const [isListOpen, setIsListOpen] = useState(false);\n  const selectionRef = useRef<HTMLButtonElement>(null);\n\n  const handleChooseUser = (user: User) => {\n    onSelectUser(user);\n    setIsListOpen(false);\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (target: EventTarget | null) => {\n      if (selectionRef.current\n        && !selectionRef.current.contains(target as Node)) {\n        setIsListOpen(false);\n      }\n    };\n\n    document.addEventListener(\n      'click',\n      (event) => handleClickOutside(event.target),\n    );\n\n    return () => {\n      document.removeEventListener(\n        'click',\n        (event) => handleClickOutside(event.target),\n      );\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isListOpen,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          ref={selectionRef}\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsListOpen(prevState => !prevState)}\n        >\n          <span>\n            {!selectedUser\n              ? 'Choose a user'\n              : selectedUser.name}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser === user,\n              })}\n              onClick={() => handleChooseUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    const onLoadGetUsers = async () => {\n      try {\n        const allUsers = await getUsers();\n\n        setUsers(allUsers);\n      } catch (error) {\n        throw Error('Unable to load users');\n      }\n    };\n\n    onLoadGetUsers();\n  }, []);\n\n  const handleSelectUser = useCallback((user: User | null) => {\n    setSelectedUser(user);\n  }, []);\n\n  const handleSelectPost = useCallback((post: Post | null) => {\n    setSelectedPost(post);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSelectUser={handleSelectUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                  ? (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )\n                  : (\n                    <PostsList\n                      selectedUser={selectedUser}\n                      selectedPost={selectedPost}\n                      onSelectPost={handleSelectPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails selectedPost={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}